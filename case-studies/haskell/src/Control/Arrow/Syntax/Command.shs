module Control.Arrow.Syntax.Command where

import Control.Arrow.Syntax.Alternatives
import Control.Arrow.Syntax.Statement


context-free syntax
  "proc" HaskellAPat "->" ArrCommand -> HaskellExp {cons("ArrProcedure")}

  HaskellExp "-<" HaskellExp -> ArrCommand {cons("ArrFirst")}
  HaskellExp "-<<" HaskellExp -> ArrCommand {cons("ArrHigher")}
  
  "\\" HaskellFargs "->" ArrCommand -> ArrCommand {cons("ArrAbs")}
  "let" HaskellDeclbinds "in" ArrCommand -> ArrCommand {cons("ArrLet")} 
  "if" HaskellExp "then" ArrCommand "else" ArrCommand -> ArrCommand {cons("ArrIf")}
  "case" HaskellExp "of" ArrAltList -> ArrCommand	{cons("ArrCase"), longest-match}
  "do" ArrStmtList -> ArrCommand {cons("ArrDo"), longest-match}

  ArrCommand HaskellExp -> ArrCommand {cons("ArrAppBin"),left}
  
  "(" ArrCommand ")" -> ArrCommand {bracket}
  "(|" HaskellExp ArrCommand+ "|)" -> ArrCommand {cons("ArrForm")}
  ArrCommand HaskellQop ArrCommand -> ArrCommand {cons("ArrOpApp"), right}

context-free priorities
    ArrCommand HaskellExp -> ArrCommand
  > ArrCommand HaskellQop ArrCommand -> ArrCommand

lexical syntax
  "proc" -> HaskellVARID {reject}
  "-<" -> HaskellVARSYM {reject}
  "-<<" -> HaskellVARSYM {reject}

-- remainder of file declares priorities for disambiguation
context-free priorities
    ArrCommand HaskellExp -> ArrCommand
  	> {
        "\\" HaskellFargs "->" ArrCommand -> ArrCommand
        "let" HaskellDeclbinds "in" ArrCommand -> ArrCommand 
        "if" HaskellExp "then" ArrCommand "else" ArrCommand -> ArrCommand
        "case" HaskellExp "of" AltList -> ArrCommand
        "do" ArrStmtList -> ArrCommand

        HaskellExp "-<" HaskellExp -> ArrCommand
        HaskellExp "-<<" HaskellExp -> ArrCommand
      }

context-free priorities
    ArrCommand HaskellQop ArrCommand -> ArrCommand
  <0>
  > {
        "\\" HaskellFargs "->" ArrCommand -> ArrCommand
        "let" HaskellDeclbinds "in" ArrCommand -> ArrCommand 
        "if" HaskellExp "then" ArrCommand "else" ArrCommand -> ArrCommand
    }

context-free priorities
  	HaskellExp HaskellExp -> HaskellExp
  	> 
      {
        "proc" HaskellAPat "->" ArrCommand -> HaskellExp {cons("ArrProcedure")}
        HaskellExp "-<" HaskellExp -> ArrCommand
        HaskellExp "-<<" HaskellExp -> ArrCommand
      }

context-free priorities
    HaskellExp HaskellQop HaskellExp -> HaskellExp
  <0> >
    "proc" HaskellAPat "->" ArrCommand -> HaskellExp {cons("ArrProcedure")}

context-free priorities
      {
        HaskellExp "-<" HaskellExp -> ArrCommand
        HaskellExp "-<<" HaskellExp -> ArrCommand
      }
    <0>
  	> {
        "\\" HaskellFargs "->" HaskellExp -> HaskellExp
       "let" HaskellDeclbinds "in" HaskellExp -> HaskellExp 
       "if" HaskellAnyExp "then" HaskellAnyExp "else" HaskellExp -> HaskellExp
       "do" HaskellStmtList -> HaskellExp {cons("Do"), longest-match}
       "case" HaskellAnyExp "of" HaskellAltList          -> HaskellExp  	{cons("Case"), longest-match}
      }
