module Sample

import typing.check.TypeChecker

public type Id2 = \X::*=>*. X

public type Id = \X::*. X

public type T1 = mu A. A

public type T2 = \ Q::*. Q

public type T3 = Id2 (\Z::*. Z) (mu D. Nat)

public type T4 = Id Nat

public type T5 = T2 Bool

public type T6 = \A::*.\B::*=>*. A -> A -> B A

public type T7 = {x:Nat,y:Bool,z:String}

public type T8 = {x:Nat,y:Nat,z:Id String}

public type T9 = Nat -> Bool -> String -> Id Bool

public type T10 = {x:Nat,x1:Id T1,y:Bool}

public val v1 = 1

public val v2 = \x:Bool.\y:Nat. x

public val v3 = v2 true 1

public val id = \A::*.\a:A.a

public val v4 = id [Id Nat]

public val v5 = id [Id Bool]

public val v6 = v4 1
