module typing.rules.Syntax

import org.sugarj.languages.Stratego
import org.sugarj.languages.Fomega

import concretesyntax.Stratego


lexical syntax
  "===" "="* -> RuleSep

lexical restrictions
  RuleSep -/- [\=]

context-free syntax
  RuleSep StrategoVar? -> RuleSepName {cons("RuleName"), layout(1.first.line == 2.last.line)}


context-free syntax // *** Syntax for typing rules ***

  TypeRule -> SugarDefElem

  RulePremises RuleSepName RuleConsequence
    -> TypeRule {cons("TypeRule"),
                 layout(1.first.col == 2.first.col &&
                        2.first.col == 3.first.col)}

  PremiseList -> RulePremises {cons("PremiseList")}
              -> RulePremises {cons("NoPremises")}

  OffTypingJudgment -> RuleConsequence
  
  TypingJudgment -> OffTypingJudgment {layout(1.first.col < 1.left.col)}

  OffTypeRuleJudgment -> PremiseList
  OffTypeRuleJudgment PremiseList -> PremiseList {cons("PremiseCons"), layout(1.first.col == 2.first.col)}

  TypeRuleJudgment -> OffTypeRuleJudgment {layout(1.first.col < 1.left.col)}


context-free syntax // *** Syntax for branch typing rules ***

  BranchTypeRule -> SugarDefElem
  
  BranchTypeRulePremises RuleSepName BranchTypeRuleConsequence
    -> BranchTypeRule {cons("BranchTypeRule"),
                       layout(1.first.col == 2.first.col &&
                              2.first.col == 3.first.col)}

  BranchTypeRulePremiseList -> BranchTypeRulePremises {cons("PremiseList")}
                            -> BranchTypeRulePremises {cons("NoPremises")}

  OffBranchTypingJudgment -> BranchTypeRuleConsequence
  
  BranchTypingJudgment -> OffBranchTypingJudgment {layout(1.first.col < 1.left.col)}

  OffBranchTypeRuleJudgment                           -> BranchTypeRulePremiseList
  OffBranchTypeRuleJudgment BranchTypeRulePremiseList -> BranchTypeRulePremiseList {cons("PremiseCons"),
                                                                                    layout(1.first.col == 2.first.col)}

  BranchTypeRuleJudgment -> OffBranchTypeRuleJudgment {layout(1.first.col < 1.left.col)}


context-free syntax // *** Syntax for contexts ***

  "()"                                                        -> Context {cons("CtxEmpty")}
  "(" Context ";" FomegaID ":" FomegaType ")"                 -> Context {cons("CtxBindVar")}
  "(" Context ";" FomegaID "::" FomegaKind ")"                -> Context {cons("CtxBindTVar")}
  "(" Context ";" FomegaID "::" FomegaKind "=" FomegaType ")" -> Context {cons("CtxBindTVarDef")}


context-free syntax // *** Syntax for judgments ***

  Context "|-" FomegaType "::" FomegaKind                      -> KindingJudgment       {cons("KindingJudgment")} 
  Context "|-" FomegaExpr ":" FomegaType                       -> TypingJudgment        {cons("TypingJudgment")}
  Context "|-" FomegaType "~>" FomegaType                      -> NormalizationJudgment {cons("NormalizationJudgment")}
  Context "|" FomegaTyDecls "|-" FomegaBranches ":" FomegaType -> BranchTypingJudgment  {cons("BranchTypingJudgment")}

  "lab" "(" FomegaTyDecls ")" "~=" "tag" "(" FomegaBranches ")" ->
    LabelTagJudgment {cons("LabelTagJudgment")}

  FomegaID "notin" "tag" "(" FomegaBranches ")"      -> NotinTagJudgment      {cons("NotinTagJudgment")}
  FomegaID "notin" "sel" "(" FomegaFields ")"        -> NotinSelJudgment      {cons("NotinSelJudgment")}
  FomegaID ":" FomegaType "in" "decls" FomegaTyDecls -> InDeclJudgment        {cons("InDeclJudgment")}
  FomegaID ":" FomegaType "in" Context               -> VarInContextJudgment  {cons("VarInContextJudgment")}
  FomegaQID ":" FomegaType "in" Context              -> QVarInContextJudgment {cons("QVarInContextJudgment")}

  // Judgments allowed as premises in typing rules
  KindingJudgment       -> TypeRuleJudgment
  TypingJudgment        -> TypeRuleJudgment
  NormalizationJudgment -> TypeRuleJudgment
  BranchTypingJudgment  -> TypeRuleJudgment
  NotinTagJudgment      -> TypeRuleJudgment
  NotinSelJudgment      -> TypeRuleJudgment
  InDeclJudgment        -> TypeRuleJudgment
  VarInContextJudgment  -> TypeRuleJudgment
  QVarInContextJudgment -> TypeRuleJudgment
  LabelTagJudgment      -> TypeRuleJudgment
  
  // Judgments allowed as premises in branch typing rules
  TypingJudgment        -> BranchTypeRuleJudgment
  InDeclJudgment        -> BranchTypeRuleJudgment
  NotinTagJudgment      -> BranchTypeRuleJudgment
  NormalizationJudgment -> BranchTypeRuleJudgment
  BranchTypingJudgment  -> BranchTypeRuleJudgment


context-free syntax // *** Substitution on level of types

  "[" FomegaID "|->" FomegaType "]" FomegaType -> FomegaType {cons("Subst")}

signature
  constructors
    Subst: FomegaID * FomegaType * FomegaType -> FomegaType

// *** Meta variables ***

context-free syntax
  "~" StrategoVar  -> Context        {cons("Metavar")}
  "~" StrategoVar  -> FomegaTyDecls  {cons("Metavar")}
  "~" StrategoVar  -> FomegaBranches {cons("Metavar")}
  "~" StrategoVar  -> FomegaFields   {cons("Metavar")}
  "~" StrategoVar  -> FomegaExpr     {cons("Metavar")}
  "~" StrategoVar  -> FomegaType     {cons("Metavar")}
  "~" StrategoVar  -> FomegaKind     {cons("Metavar")}

  "~%" StrategoVar -> FomegaID       {cons("Metavar")}
  "~&" StrategoVar -> FomegaQID      {cons("Metavar")}

  "~#" StrategoVar -> FomegaNAT      {cons("Metavar")}
  "~$" StrategoVar -> FomegaSTRING   {cons("Metavar")}

signature
  constructors
    Metavar: String -> Term
