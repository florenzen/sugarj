module typing.check.Type

import typing.check.Context
import typing.check.ErrorHandling

import org.sugarj.languages.Fomega

signature
  constructors
    KiUnknown: FomegaKind

rules
  lab : TyDeclsNil -> []
  lab : TyDeclsCons(TyDecl(x, T), decls) -> [x | <lab> decls]

  kindMismatch:
    (K,J) -> [<concat-strings> ["kind mismatch, expected ",<write-to-string> K," but found ",<write-to-string> J]]

  kindEq: (KiUnknown(),K) -> []
  kindEq: (K,KiUnknown()) -> []
  kindEq: (K,J) -> <kindEqProper> (K,J)
          where <not(structurally-equal)> (K, KiUnknown())
              ; <not(structurally-equal)> (J, KiUnknown())

  kindEqProper: (KiStar(),K) -> msgs
                where if !K; ?KiStar() then ![] else !(<kindMismatch> (KiStar(),K)) end => msgs
  kindEqProper: (KiArrow(J1,J2),K) -> msgs
                where if (!K; ?KiArrow(K1,K2)) then
                        !(<conc> (<kindEq> (J1,K1),<kindEq> (J2,K2)))
                      else
                        !(<kindMismatch> (KiArrow(J1,J2),K))
                      end => msgs

  kindEqArrow: KiUnknown() -> (KiUnknown(),KiUnknown(),[])
  kindEqArrow: KiArrow(K1,K2) -> (K1,K2,[])
  kindEqArrow: K -> (KiUnknown(),KiUnknown()
                    ,[<concat-strings> ["kind mismatch, expected arrow kind but found "
                                       ,<write-to-string> K]])
               where if (!K; ?KiArrow(_,_)) then fail else if (!K; ?KiUnknown()) then fail else id end end

  kindEqStar: KiUnknown() -> []
  kindEqStar: KiStar() -> []
  kindEqStar: K -> [<concat-strings> ["kind mismatch, expected * but found "
                                     ,<write-to-string> K]]
              where if (!K; ?KiStar()) then fail else if (!K; ?KiUnknown()) then fail else id end end

  kindOf:
    (ctx,TyMu(X,T)) -> (K,<conc> (errs1,errs2))
    where <kindOf> (CtxBindTVar(ctx,X,KiStar()),T) => (K,errs1)
        ; <kindEqStar> K => msgs2
        ; <msgsToErrs> (msgs2,T) => errs2

  kindOf:
    (ctx,TyAbs(X,K1,T2)) -> (KiArrow(K1,K2),errs1)
    where <kindOf> (CtxBindTVar(ctx,X,K1),T2) => (K2,errs1)

  kindOf:
    (ctx,TyForall(X,K1,T2)) -> (KiStar(),<conc> (errs1,errs2))
    where <kindOf> (CtxBindTVar(ctx,X,K1),T2) => (K2,errs1)
        ; <kindEqStar> K2 => msgs2
        ; <msgsToErrs> (msgs2,T2) => errs2

  kindOf:
    (ctx,TyArrow(T1,T2)) -> (KiStar(),<conc> (errs1,errs2,errs3,errs4))
    where <kindOf> (ctx,T1) => (K1,errs1)
        ; <kindOf> (ctx,T2) => (K2,errs2)
        ; <kindEqStar> K1 => msgs3
	    ; <msgsToErrs> (msgs3,T1) => errs3
        ; <kindEqStar> K2 => msgs4
        ; <msgsToErrs> (msgs4,T2) => errs4

  kindOf:
    (ctx,TyApp(T1,T2)) -> (K12,<conc> (errs1,errs2,errs3,errs4))
    where <kindOf> (ctx,T1) => (K1,errs1)
        ; <kindOf> (ctx,T2) => (K2,errs2)
        ; <kindEqArrow> K1 => (K11,K12,msgs3)
        ; <msgsToErrs> (msgs3,T1) => errs3
        ; <kindEq> (K11,K2) => msgs4
        ; <msgsToErrs> (msgs4,T2) => errs4

  kindOf:
    (CtxEmpty(),TyQVar(qX)) -> (KiUnknown(),[(qX,"undefined identifier ",qX)])
  kindOf:
    (CtxBindTVar(ctx,Y,K),TyQVar(qX)) -> <kindOf> (ctx,TyQVar(qX))
  kindOf:
    (CtxBindVar(ctx,y,T),TyQVar(qX)) -> <kindOf> (ctx,TyQVar(qX))
  kindOf:
    (CtxBindTVarDef(ctx,qY,K,T),TyQVar(qX)) -> (K,[])
    where <structurally-equal> (qY, qX)
  kindOf:
    (CtxBindTVarDef(ctx,qY,K,T),TyQVar(qX)) -> <kindOf> (ctx,TyQVar(qX))
    where <not(structurally-equal)> (qY, qX)

  kindOf:
    (ctx,TyVariant(TyDeclsNil())) -> (KiStar(),[])
  kindOf:
    (ctx,TyVariant(TyDeclsCons(TyDecl(x,T), decls))) ->
    (KiStar(),<conc> (errs1,errs2,errs3,errs4,errs5))
    where errorUnless(<not(elem)> (x,<lab> decls)
                     | [(decls, <concat-strings> ["duplicate label ",x])]) => errs1
        ; <kindOf> (ctx,T) => (K,errs2)
        ; <kindOf> (ctx,TyVariant(decls)) => (J,errs3)
        ; <kindEqStar> K => msgs4
        ; <msgsToErrs> (msgs4,T) => errs4
        ; <kindEqStar> J => msgs5
        ; <msgsToErrs> (msgs5,decls) => errs5

  kindOf:
    (ctx,TyRecord(TyDeclsNil())) -> (KiStar(),[])
  kindOf:
    (ctx,TyRecord(TyDeclsCons(TyDecl(x,T), decls))) ->
    (KiStar(),<conc> (errs1,errs2,errs3,errs4,errs5))
    where errorUnless(<not(elem)> (x,<lab> decls)
                     | [(x,<concat-strings> ["duplicate label ",x])]) => errs1
        ; <kindOf> (ctx,T) => (K,errs2)
        ; <kindOf> (ctx,TyVariant(decls)) => (J,errs3)
        ; <kindEqStar> K => msgs4
        ; <msgsToErrs> (msgs4,T) => errs4
        ; <kindEqStar> J => msgs5
        ; <msgsToErrs> (msgs5,decls) => errs5

  kindOf:
    (ctx,TyString()) -> (KiStar(),[])

  kindOf:
    (ctx,TyNat()) -> (KiStar(),[])

  kindOf:
    (ctx,TyBool()) -> (KiStar(),[])

  kindOf:
    (CtxEmpty(),TyVar(X)) -> (KiUnknown(),[(X,<concat-strings> ["undefined identifier ",X])])
  kindOf:
    (CtxBindVar(ctx,y,T),TyVar(X)) -> <kindOf> (ctx,TyVar(X))
  kindOf:
    (CtxBindTVar(ctx,Y,K),TyVar(X)) -> (K,[])
    where <structurally-equal> (Y, X)
  kindOf:
    (CtxBindTVarDef(ctx,Y,K,T),TyVar(X)) -> (K,[])
    where <structurally-equal> (Y, X)
  kindOf:
    (CtxBindTVar(ctx,Y,K),TyVar(X)) -> <kindOf> (ctx,TyVar(X))
    where <not(structurally-equal)> (Y, X)
  kindOf:
    (CtxBindTVarDef(ctx,Y,K,T),TyVar(X)) -> <kindOf> (ctx,TyVar(X))
    where <not(structurally-equal)> (Y, X)

// *** Notes ***
//
// Judgments:
// * x ∉ lab(decls)
// * qx ≠ qy
// * x ≠ y
// * Γ ⊢ T :: K
// * error(<msg>)
//
// Structural equality for kinds with KiUnknown equal to any kind.
//
// Conditional decomposition of kinds.
