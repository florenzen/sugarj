package impl;

import variability.Java;

import java.io.IOException;
import impl.Vertex;
import impl.Graph;
import impl.EdgeIfc;



#ifdef(BaseImpl)
public variable class Main {
  static Vertex V[];
  static int startVertices[];
  static int endVertices[];
  public static void main(  String[] args){
    long beginning=System.currentTimeMillis();
    Graph g=new Graph();
    try {
      g.runBenchmark(args[0]);
    }
    catch (IOException e) {
    }
    int num_vertices=0;
    int num_edges=0;
    try {
      num_vertices=g.readNumber();
      num_edges=g.readNumber();
      g.readNumber();
      g.readNumber();
      g.readNumber();
    }
 catch (    IOException e) {
    }
    V=new Vertex[num_vertices];
    startVertices=new int[num_edges];
    endVertices=new int[num_edges];
    int i=0;
    for (i=0; i < num_vertices; i++) {
      V[i]=new Vertex().assignName("v" + i);
      g.addVertex(V[i]);
    }
    try {
      for (i=0; i < num_edges; i++) {
        startVertices[i]=g.readNumber();
        endVertices[i]=g.readNumber();
      } 
    }
    catch (    IOException e) {
    }
    Main.readWeights(g,num_edges);
    try {
      g.stopBenchmark();
    }
    catch (IOException e) {
    }
    for (i=0; i < num_edges; i++)     Main.addEdge(g,i);
    Graph.startProfile();
    g.run(g.findsVertex(args[1]));
    Graph.stopProfile();
    long totalTime=System.currentTimeMillis() - beginning;
    g.display();
    Graph.resumeProfile();
    Graph.endProfile();
    System.out.println("Total Time: " + totalTime);
  }
  static EdgeIfc addEdge(  Graph g,  int n){
    Vertex v1=(Vertex)V[startVertices[n]];
    Vertex v2=(Vertex)V[endVertices[n]];
    return g.addEdge(v1, v2, #ifdef(Weighted) 0);
  }
  static void readWeights(Graph g, int num_edges){
  }
}

