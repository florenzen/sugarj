module extensions.Enum

import org.sugarj.languages.Fomega
import concretesyntax.Fomega
import concretesyntax.Metavars

import extension.Declaration

import contextanalysis.rules.Syntax
import contextanalysis.rules.Desugaring
import contextanalysis.rules.Verification
import contextanalysis.TypingRelation
import contextanalysis.SignatureRelation


syntax {
  context-free syntax
    "enum" FomegaID "=" EnumNames -> FomegaDef {cons("EnumDef")}

    FomegaID           -> EnumNames {cons("EnumNamesEnd")}
    FomegaID EnumNames -> EnumNames {cons("EnumNamesCons")}

  lexical syntax
    "enum" -> FomegaKeyword

  lexical restrictions
    "enum" -/- [a-zA-Z0-09]

  context-free syntax
    "~*" StrategoVar -> EnumNames {cons("Metavar")}
}

desugaring desugar-enum {
  signature
    constructors
      ENUM-ELEMS : FomegaID * EnumNames * Nat * FomegaDefs -> StrategoTerm
      //ENUM-ELEMS : FomegaID * EnumNames * FomegaDefs -> StrategoTerm
      ENUM-CTX : Context * FomegaID * EnumNames -> StrategoTerm

  rules
    desugar-enum :
      |[ enum ~%X = ~*elems ~=defs ]| ->
        |[ type ~%X = Nat Mdefs~ENUM-ELEMS(X, elems, 0, defs) ]|
        //|[ type ~%X = Nat Mdefs~ENUM-ELEMS(X, elems, defs) ]|

    desugar-enum :
      ENUM-ELEMS(X, EnumNamesEnd(x), n, defs) -> |[ val ~%x = ~#n ~=defs ]|
      //ENUM-ELEMS(X, EnumNamesEnd(x), defs) -> |[ val ~%x = 1 ~=defs ]|

    desugar-enum :
      ENUM-ELEMS(X, EnumNamesCons(x, xs), n, defs) ->
        |[ val ~%x = ~#n Mdefs~ENUM-ELEMS(X, xs, <inc> n, defs) ]|
      //ENUM-ELEMS(X, EnumNamesCons(x, xs), defs) ->
      //  |[ val ~%x = 1 Mdefs~ENUM-ELEMS(X, xs, defs) ]|

    desugar-enum :
      ENUM-CTX(C, X, EnumNamesEnd(x)) -> fomega-ctx |[ (~C; ~%x:~%X) ]|

    desugar-enum :
      ENUM-CTX(C, X, EnumNamesCons(x, xs)) -> ENUM-CTX(fomega-ctx |[ (~C; ~%x:~%X) ]|, X, xs)
}

typing {
~%X notin dom(~C)
(~C;~%X::*=Nat) |- Mdefs~ENUM-ELEMS(X, elems, 0, defs) ==> ~sig  
========================================================================================== S-Enum 
~C |- enum ~%X = ~*elems ~=defs ==> ~sig

//~%x notin dom(~C)
//(~C;~%x:~%X) |- ~=defs ==> ~sig
//============================================================ S-ENUM-ELEMSEnd
//~C |- Mdefs~ENUM-ELEMS(X, EnumNamesEnd(x), n, defs) ==> ~sig

//~%x notin dom(~C)
//(~C;~%x:~%X) |- Mdefs~ENUM-ELEMS(X, xs, <inc> n, defs) ==> ~sig
//================================================================= S-ENUM-ELEMSCons
//~C |- Mdefs~ENUM-ELEMS(X, EnumNamesCons(x, xs), n, defs) ==> ~sig
}