module typing.Check

import org.sugarj.languages.Fomega
import org.sugarj.languages.SugarFomega

/*
rules
  constraint-error : FomegaBody(defs) -> errors
    where <foldl(check-next-def)> (defs, (<empty-ctx>, [])) => (ctx, errors)
  
  check-next-def : (def, (ctx, errors)) -> (ctx', errors')
    where
      <debug(!"defs: ");check-def; debug(!"def-errors: ")> (ctx, def) => def-errors;
      <conc> (errors, def-errors)  => errors';
      <extend-ctx> (def, ctx) => ctx'

  extend-ctx : (TypeDef(_, name, kind, _), ctx) -> <bind-tvar> (name, kind, ctx)
  extend-ctx : (ValDef(_, name, type, _), ctx) -> <bind-var> (name, type, ctx)

  check-def : (ctx, TypeDef(_, name, kind, type)) -> []
    where <kcheck> (ctx, type, kind)
  check-def : (ctx, TypeDef(_, name, kind, type)) -> [(type, <write-to-string; msg-wrong-kind> kind)]
    where <not(kcheck)> (ctx, type, kind)

  // TODO
  check-def : (ctx, ValDef(_, name, kind, type)) -> []

signature constructors
  Var : Var -> Var
  TVar : TVar -> TVar

rules
  empty-ctx : x -> []
  bind-var : (var, type, ctx) -> [(Var(var), type) | ctx]
  bind-tvar : (tvar, kind, ctx) -> [(TVar(tvar), kind) | ctx]

  head : [a|_] -> a
  lookup-var : (var, ctx) -> <filter( ?(Var(var),<id>) ); head> ctx
  lookup-tvar : (tvar, ctx) -> <filter( ?(TVar(tvar),<id>) ); head> ctx

rules
  msg-expected-kind : (exp,act) -> <concat-strings> ["Expected kind ", exp, ", actual kind ", act, "."]
  msg-wrong-kind : act -> <concat-strings> ["Wrong kind ", act, "."]
  msg-unbound : (thing, what) -> <concat-strings> ["Unbound ", what, ": ", thing]


rules
  // K-Nat
  kcheck : (ctx, TyNat, KiStar) -> []

  // K-Bool
  kcheck : (ctx, TyBool, KiStar) -> []

  // K-String
  kcheck : (ctx, TyString, KiStar) -> []

  // K-TVar
  kcheck : (ctx, TyVar(tvar), kind) -> []
    where
      <lookup-tvar> (tvar, ctx) => kind';
      <equal> (kind, kind')   

  // K-Abs
  kcheck : (ctx, TyAbs(x, k1, t2), KiArrow(k1, k2)) -> []
    where
      <bind-tvar> (x, k1, ctx) => ctx';
      <kcheck> (ctx', t2, k2)

rules
  tcheck : (ctx, term, type) -> []
    where fail
*/
