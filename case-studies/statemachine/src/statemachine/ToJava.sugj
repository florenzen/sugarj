package statemachine;

import template.Unquote;
import template.Shorthands;
import template.Foreach;
import template.UnquoteEnum;
import template.LocalStrategies;
import template.IdentifierComposition;

import statemachine.Metamodel;
import org.sugarj.languages.Java;

public template ToJava {
  $$id-as-string = ?Id(<id>); !Lit(String([Chars(<id>)]))
  $$ensure-list = is-list <+ ![<id>]
  $$event-as-class : EventName(name) -> 
    > public class $name implements Event {
        private $name() { } 
        public String toString() { return ${<id-as-string> name}; }
      }
      public Event event_#$name() {
        return new id $name();
      }
    <
  $$all-events-as-classes = collect-all(?Events(<id>); mapconcat(event-as-class; ensure-list)); concat
  $$transition-premise : Transition(NamedEvent(name),_) -> >e instanceof id $name<
  $$transition-consequence : Transition(_, state@(Id(_))) -> [ >return $state#_instance;< ]

  $pkg = collect-one(?PackageDec(_,<id>))
  $classname = collect-one(?ModelDecHead(_,<id>,_))

  package $pkg;

  import java.lang.IllegalArgumentException;

  public class $classname {
    public static interface Event {}

    $*{all-events-as-classes}
    

    public static interface State {
      public State step(Event e);
    }

    $for(State(name, transitions) in collect-all(?State(_,_))) {
      private final State $name#_instance = new id $name();

      public State state_#$name() {
        return $name#_instance;
      }

      public class $name implements State {
        private $name() { }
        public String toString() { return ${<id-as-string> name}; }

        public State step(Event e) {
          $for(t in !transitions) {
            if (${<transition-premise> t}) {
              $*{<transition-consequence> t}
            }
          }
          throw new IllegalArgumentException("Unexpected event " + e);
        }
      }
    };

    private State state = ${collect-one(?InitialState(<id>))}#_instance;

    public State step(Event e) {
      state = state.step(e);
      return state;
    }

    public State run(Event[] es) {
      for (Event e : es)
        step(e);
      return state;
    }

    public State currentState() {
      return state;
    }
  }
}